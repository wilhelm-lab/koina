openapi: 3.0.3
info:
  title: Koina - Getting started
  description: |-
    Models can be accessed through various programming languages and tools. The easiest way to access models is by using the **Try button** available on this website for each model. Clicking this button sends the example input found in the documentation to the model and returns the result. You can modify the input data and view the results directly in your browser. When predicting fragment ion intensities, the resulting spectra are visualized in the browser.

    To compare predictions of different models or against experimental spectra accessible via the Universal Spectrum Identifier (USI), visit the [Compare Spectra Tab](/compare-spectra).

    Each model's documentation includes several ready-to-use code samples for different programming languages, enabling you to quickly integrate with Koina. If you develop a new integration with Koina not covered by the provided samples, please consider contributing your code to the Koina GitHub repository.

    Additionally, several popular proteomics tools have integrated Koina into their software, such as [FragPipe](https://fragpipe.nesvilab.org/docs/tutorial_koina.html), [Skyline](https://skyline.ms/project/home/software/skyline/begin.view), and [Oktoberfest](https://oktoberfest.readthedocs.io/en/stable/).

    If you use Koina in your research, either directly or through one of its available integrations, **please cite the model you used as well as the following paper:**

    ```
    Koina: Democratizing machine learning for proteomics research  
    Ludwig Lautenbacher, Kevin L. Yang, Tobias Kockmann, et al.  
    bioRxiv 2024.06.01.596953; doi: https://doi.org/10.1101/2024.06.01.596953
    ```
  version: 0.0.1
  contact:
    email: Ludwig.Lautenbacher@tum.de
externalDocs:
  description: Koina GitHub
  url: https://github.com/wilhelm-lab/koina
servers:
  - url: {{tmpl_url}}/v2/models
tags: # Define order of Tags
  - name: Fragment intensity
  - name: Retention Time
  - name: Collisional cross section
  - name: Cross-linking fragment intensity
  - name: Metabolomics fragment intensity
paths:
{% for model in models %}
  /{{model.name}}/infer:
     post:
      tags:
        - {{model.note.tag}}
      summary: {{model.name}}
      description: |
        ### Summary
        {%filter indent(width=8) %}{{model.note.description }}{%endfilter%}

        ### Citaton
        {%filter indent(width=8) %}{{model.note.citation }}{%endfilter%}

      x-code-samples:
        - lang: Python
          label: 'Python (koinapy)'
          source: |
          {% filter indent(width=4) %}{{ model.code }}{% endfilter %}
        - lang: Shell
          label: 'cURL'
          source: |
          {% filter indent(width=4) %}{{ model.curl_code }}{% endfilter %}
        - lang: Shell
          label: 'R-lang (http)'
          source: |
          {% filter indent(width=4) %}{{ model.rlang_code }}{% endfilter %}
        - lang: Shell
          label: 'R-lang (koinar)'
          source: |
          {% filter indent(width=4) %}{{ model.rlang_koinar_code }}{% endfilter %}
        - lang: java
          label: 'java (Version > 15)'
          source: |
          {% filter indent(width=4) %}{{ model.java_15_code }}{% endfilter %}
        - lang: java
          label: 'java (Version > 8)'
          source: |
          {% filter indent(width=4) %}{{ model.java_8_code }}{% endfilter %}

      operationId: {{model.name}}
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{{model.name ~ '_' ~ 'input'}}'
        required: true
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input
{% endfor %}
components:
  schemas:
    parameters:
      type: object
      properties:
        sequence_id:
          type: integer
          example: 0
        sequence_start:
          type: boolean
          example: false
        sequence_end:
          type: boolean
          example: false
{% for model in models %}
    {{model.name ~ '_' ~ 'input'}}:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          example:
            {% for input in model.note.examples.inputs %}
            - name: {{input.name}}
              shape: {{input.shape}}
              datatype: {{input.httpdtype}}
              data: {{input.data}}
            {% endfor %}
          type: array
          items:
            allOf:
              {% for input in model.note.examples.inputs %}
              - $ref: "#/components/schemas/{{model.name ~ '_input_'~input.name}}"
              {% endfor %}
            minItems: {{model.note.examples.inputs|length}}
            maxItems: {{model.note.examples.inputs|length}}
            uniqueItems: true

  {% for input in model.note.examples.inputs %}
    {{model.name ~ '_' ~ 'input_'~input.name}}:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: {{input.data}}
          items:
            type: {{input.openapidtype}}
  {% endfor %}
{% endfor %}

openapi: 3.0.3
info:
  title: Koina
  description: |-
    This is the official documentation of the machine learning model hosting platform Koina.
    Koina is a generic, open-source, and online-accessible prediction service
    that significantly simplifies using machine learning models by making them accessible via the web.
    ## Accessing a public server
    You can access Koina using either http or grpc.
    For each model endpoint below you will find multiple examples of how to request predictions.
    The simplest option is to use the "Try Out" button which will send a request directly in your browser.
    The "Try out" button will also autogenerate an example code using curl.
    Lastly for each model there is also an example of how to send gRPC requests using Python.
    ## Hosting your own server
    Koina is open source and free to use as such you can host your own instance of Koina.
    For this we provide an easy to use docker image.
    For more information regarding this go to our [GitHub](https://github.com/wilhelm-lab/koina)
    Koina was initially developed at [EuBIC-MS Developers Meeting 2023](https://eubic-ms.org/events/2023-developers-meeting/) and is meant as a resource from the community for the community.
    Multiple organizations are already hosting instances of Koina.
    Such as the [ETH|UZH](https://fgcz.ch/omics_areas/bioinf/proteome_informatics.html),
    [TUM](https://www1.ls.tum.de/en/compms/home/) as well as
    [MSAID](https://www.msaid.de/).

    You can join in this community effort, it's as simple as running the provided docker image and sending an email to Ludwig.Lautenbacher@tum.de telling me under which URL your server can be accessed.
    ## Adding your own model
    If you are developing a machine learning model in the field of proteomics, and want to make it as widely available as possible you can contribute by adding your model to Koina.
    You will find detailed instructions on how to do this in our [GitHub](https://github.com/wilhelm-lab/koina)
  termsOfService: https://github.com/wilhelm-lab/koina
  contact:
    email: Ludwig.Lautenbacher@tum.de
  # license:
  #   name: Apache 2.0
  #   url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.7
externalDocs:
  description: Koina GitHub
  url: https://github.com/wilhelm-lab/koina
servers:
  - url: https://koina.proteomicsdb.org/v2/models
tags:
  - name: Retention Time
  - name: Intensity
  - name: Collisional cross section
paths:

  /Deeplc_hela_hf/infer:
     post:
      tags:
        - Retention Time
      summary: Deeplc_hela_hf
      description: |
        **Summary**

        Find out more about this model <a href="https://github.com/compomics/DeepLC/tree/master">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>DeepLC can predict retention times for peptides that carry as-yet unseen modifications<br>Robbin Bouwmeester, Ralf Gabriels, Niels Hulstaert, Lennart Martens & Sven Degroeve<br>Nature Methods 18, 1363–1369 (2021) doi: 10.1038/s41592-021-01301-5<br>

        **Citaton**



        **Examples**

        <details>
        <summary>Python using GRPC</summary>

        ```python
        import numpy as np
        import time
        import tritonclient.grpc as grpcclient

        nptype_convert = {
            np.dtype('float32'): 'FP32',
            np.dtype('O'): 'BYTES',
            np.dtype('int16'): 'INT16',
            np.dtype('int32'): 'INT32',
            np.dtype('int64'): 'INT64',
        }

        server_url = 'koina.proteomicsdb.org:443'
        model_name = 'Deeplc_hela_hf'
        batch_size = 1000
        inputs = {
            'peptide_sequences': np.array([['LGGNEQVTR'], ['GAGSSEPVTGLDAK'], ['VEATFGVDESNAK'], ['LFLQFGAQGSPFLK']], dtype=np.dtype("O")).reshape([4,1]),
        }
        outputs = [ 'irt', ]

        triton_client = grpcclient.InferenceServerClient(url=server_url, ssl=True)

        koina_outputs = []
        for name in outputs:
            koina_outputs.append(grpcclient.InferRequestedOutput(name))

        predictions = {name: [] for name in outputs}
        len_inputs = list(inputs.values())[0].shape[0]
        for i in range(0, len_inputs, batch_size):
            if len_inputs < i+batch_size:
                current_batchsize = len_inputs
            else:
                current_batchsize = batch_size

            koina_inputs = []
            for iname, iarr in inputs.items():
                koina_inputs.append(
                    grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])
                )
                koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])

            prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)

            for name in outputs:
                predictions[name].append(prediction.as_numpy(name))

        for key, value in predictions.items():
            predictions[key] = np.vstack(value)
            print(key)
            print(predictions[key])
        ```

        </details>
      operationId: Deeplc_hela_hf
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deeplc_hela_hf_input'
        required: true
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input

  /ms2pip_2021_HCD/infer:
     post:
      tags:
        - Intensity
      summary: ms2pip_2021_HCD
      description: |
        **Summary**

        Find out more about this model <a href="https://github.com/compomics/ms2pip">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>Gabriels, R., Martens, L., & Degroeve, S. (2019). Updated MS²PIP web server delivers fast and accurate MS² peak intensity prediction for multiple fragmentation methods, instruments and labeling techniques. Nucleic Acids Research doi:10.1093/nar/gkz299<br><br>Prior MS²PIP publications:<br><br>Degroeve, S., Maddelein, D., & Martens, L. (2015). MS²PIP prediction server: compute and visualize MS² peak intensity predictions for CID and HCD fragmentation. Nucleic Acids Research, 43(W1), W326–W330. doi:10.1093/nar/gkv542<br><br>Degroeve, S., & Martens, L. (2013). MS²PIP: a tool for MS/MS peak intensity prediction. Bioinformatics (Oxford, England), 29(24), 3199–203. doi:10.1093/bioinformatics/btt544<br>

        **Citaton**



        **Examples**

        <details>
        <summary>Python using GRPC</summary>

        ```python
        import numpy as np
        import time
        import tritonclient.grpc as grpcclient

        nptype_convert = {
            np.dtype('float32'): 'FP32',
            np.dtype('O'): 'BYTES',
            np.dtype('int16'): 'INT16',
            np.dtype('int32'): 'INT32',
            np.dtype('int64'): 'INT64',
        }

        server_url = 'koina.proteomicsdb.org:443'
        model_name = 'ms2pip_2021_HCD'
        batch_size = 1000
        inputs = {
            'peptide_sequences': np.array(["ACDEK", "AAAAAAAAAAAAA"], dtype=np.dtype("O")).reshape([2,1]),
            'precursor_charges': np.array([2, 3], dtype=np.dtype("int32")).reshape([2,1]),
        }
        outputs = [ 'intensities',  'mz',  'annotation', ]

        triton_client = grpcclient.InferenceServerClient(url=server_url, ssl=True)

        koina_outputs = []
        for name in outputs:
            koina_outputs.append(grpcclient.InferRequestedOutput(name))

        predictions = {name: [] for name in outputs}
        len_inputs = list(inputs.values())[0].shape[0]
        for i in range(0, len_inputs, batch_size):
            if len_inputs < i+batch_size:
                current_batchsize = len_inputs
            else:
                current_batchsize = batch_size

            koina_inputs = []
            for iname, iarr in inputs.items():
                koina_inputs.append(
                    grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])
                )
                koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])

            prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)

            for name in outputs:
                predictions[name].append(prediction.as_numpy(name))

        for key, value in predictions.items():
            predictions[key] = np.vstack(value)
            print(key)
            print(predictions[key])
        ```

        </details>
      operationId: ms2pip_2021_HCD
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ms2pip_2021_HCD_input'
        required: true
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input

  /AlphaPept_ccs_generic/infer:
     post:
      tags:
        - Collisional cross section
      summary: AlphaPept_ccs_generic
      description: |
        **Summary**

        Find out more about this model <a href="https://github.com/MannLabs/alphapeptdeep">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>Wen-Feng Zeng, Xie-Xuan Zhou, Sander Willems, Constantin Ammar, Maria Wahle, Isabell Bludau, Eugenia Voytik, Maximillian T. Strauss & Matthias Mann. AlphaPeptDeep: a modular deep learning framework to predict peptide properties for proteomics. Nat Commun 13, 7238 (2022). https://doi.org/10.1038/s41467-022-34904-3<br>

        **Citaton**



        **Examples**

        <details>
        <summary>Python using GRPC</summary>

        ```python
        import numpy as np
        import time
        import tritonclient.grpc as grpcclient

        nptype_convert = {
            np.dtype('float32'): 'FP32',
            np.dtype('O'): 'BYTES',
            np.dtype('int16'): 'INT16',
            np.dtype('int32'): 'INT32',
            np.dtype('int64'): 'INT64',
        }

        server_url = 'koina.proteomicsdb.org:443'
        model_name = 'AlphaPept_ccs_generic'
        batch_size = 1000
        inputs = {
            'peptide_sequences': np.array(["AAAAAKAKM[UNIMOD:35]"], dtype=np.dtype("O")).reshape([1,1]),
            'precursor_charges': np.array([2], dtype=np.dtype("int32")).reshape([1,1]),
        }
        outputs = [ 'ccs', ]

        triton_client = grpcclient.InferenceServerClient(url=server_url, ssl=True)

        koina_outputs = []
        for name in outputs:
            koina_outputs.append(grpcclient.InferRequestedOutput(name))

        predictions = {name: [] for name in outputs}
        len_inputs = list(inputs.values())[0].shape[0]
        for i in range(0, len_inputs, batch_size):
            if len_inputs < i+batch_size:
                current_batchsize = len_inputs
            else:
                current_batchsize = batch_size

            koina_inputs = []
            for iname, iarr in inputs.items():
                koina_inputs.append(
                    grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])
                )
                koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])

            prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)

            for name in outputs:
                predictions[name].append(prediction.as_numpy(name))

        for key, value in predictions.items():
            predictions[key] = np.vstack(value)
            print(key)
            print(predictions[key])
        ```

        </details>
      operationId: AlphaPept_ccs_generic
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlphaPept_ccs_generic_input'
        required: true
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input

  /AlphaPept_ms2_generic/infer:
     post:
      tags:
        - Intensity
      summary: AlphaPept_ms2_generic
      description: |
        **Summary**

        Find out more about this model <a href="https://github.com/MannLabs/alphapeptdeep">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>Wen-Feng Zeng, Xie-Xuan Zhou, Sander Willems, Constantin Ammar, Maria Wahle, Isabell Bludau, Eugenia Voytik, Maximillian T. Strauss & Matthias Mann. AlphaPeptDeep: a modular deep learning framework to predict peptide properties for proteomics. Nat Commun 13, 7238 (2022). https://doi.org/10.1038/s41467-022-34904-3<br>

        **Citaton**



        **Examples**

        <details>
        <summary>Python using GRPC</summary>

        ```python
        import numpy as np
        import time
        import tritonclient.grpc as grpcclient

        nptype_convert = {
            np.dtype('float32'): 'FP32',
            np.dtype('O'): 'BYTES',
            np.dtype('int16'): 'INT16',
            np.dtype('int32'): 'INT32',
            np.dtype('int64'): 'INT64',
        }

        server_url = 'koina.proteomicsdb.org:443'
        model_name = 'AlphaPept_ms2_generic'
        batch_size = 1000
        inputs = {
            'peptide_sequences': np.array(["AAAAAKAKM[UNIMOD:35]"], dtype=np.dtype("O")).reshape([1,1]),
            'precursor_charges': np.array([2], dtype=np.dtype("int32")).reshape([1,1]),
            'collision_energies': np.array([25], dtype=np.dtype("float32")).reshape([1,1]),
            'instrument_types': np.array([1], dtype=np.dtype("int64")).reshape([1,1]),
        }
        outputs = [ 'intensities',  'mz',  'annotation', ]

        triton_client = grpcclient.InferenceServerClient(url=server_url, ssl=True)

        koina_outputs = []
        for name in outputs:
            koina_outputs.append(grpcclient.InferRequestedOutput(name))

        predictions = {name: [] for name in outputs}
        len_inputs = list(inputs.values())[0].shape[0]
        for i in range(0, len_inputs, batch_size):
            if len_inputs < i+batch_size:
                current_batchsize = len_inputs
            else:
                current_batchsize = batch_size

            koina_inputs = []
            for iname, iarr in inputs.items():
                koina_inputs.append(
                    grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])
                )
                koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])

            prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)

            for name in outputs:
                predictions[name].append(prediction.as_numpy(name))

        for key, value in predictions.items():
            predictions[key] = np.vstack(value)
            print(key)
            print(predictions[key])
        ```

        </details>
      operationId: AlphaPept_ms2_generic
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlphaPept_ms2_generic_input'
        required: true
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input

  /AlphaPept_rt_generic/infer:
     post:
      tags:
        - Retention Time
      summary: AlphaPept_rt_generic
      description: |
        **Summary**

        Find out more about this model <a href="https://github.com/MannLabs/alphapeptdeep">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>Wen-Feng Zeng, Xie-Xuan Zhou, Sander Willems, Constantin Ammar, Maria Wahle, Isabell Bludau, Eugenia Voytik, Maximillian T. Strauss & Matthias Mann. AlphaPeptDeep: a modular deep learning framework to predict peptide properties for proteomics. Nat Commun 13, 7238 (2022). https://doi.org/10.1038/s41467-022-34904-3<br>

        **Citaton**



        **Examples**

        <details>
        <summary>Python using GRPC</summary>

        ```python
        import numpy as np
        import time
        import tritonclient.grpc as grpcclient

        nptype_convert = {
            np.dtype('float32'): 'FP32',
            np.dtype('O'): 'BYTES',
            np.dtype('int16'): 'INT16',
            np.dtype('int32'): 'INT32',
            np.dtype('int64'): 'INT64',
        }

        server_url = 'koina.proteomicsdb.org:443'
        model_name = 'AlphaPept_rt_generic'
        batch_size = 1000
        inputs = {
            'peptide_sequences': np.array(["AAAAAKAKM[UNIMOD:35]"], dtype=np.dtype("O")).reshape([1,1]),
        }
        outputs = [ 'irt', ]

        triton_client = grpcclient.InferenceServerClient(url=server_url, ssl=True)

        koina_outputs = []
        for name in outputs:
            koina_outputs.append(grpcclient.InferRequestedOutput(name))

        predictions = {name: [] for name in outputs}
        len_inputs = list(inputs.values())[0].shape[0]
        for i in range(0, len_inputs, batch_size):
            if len_inputs < i+batch_size:
                current_batchsize = len_inputs
            else:
                current_batchsize = batch_size

            koina_inputs = []
            for iname, iarr in inputs.items():
                koina_inputs.append(
                    grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])
                )
                koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])

            prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)

            for name in outputs:
                predictions[name].append(prediction.as_numpy(name))

        for key, value in predictions.items():
            predictions[key] = np.vstack(value)
            print(key)
            print(predictions[key])
        ```

        </details>
      operationId: AlphaPept_rt_generic
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlphaPept_rt_generic_input'
        required: true
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input

  /Prosit_2019_irt/infer:
     post:
      tags:
        - Retention Time
      summary: Prosit_2019_irt
      description: |
        **Summary**

        Find out more about this model <a href="https://github.com/kusterlab/prosit">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>Wilhelm, M., Zolg, D.P., Graber, M. et al. Deep learning boosts sensitivity of mass spectrometry-based immunopeptidomics. Nat Commun 12, 3346 (2021). https://doi.org/10.1038/s41467-021-23713-9<br>

        **Citaton**



        **Examples**

        <details>
        <summary>Python using GRPC</summary>

        ```python
        import numpy as np
        import time
        import tritonclient.grpc as grpcclient

        nptype_convert = {
            np.dtype('float32'): 'FP32',
            np.dtype('O'): 'BYTES',
            np.dtype('int16'): 'INT16',
            np.dtype('int32'): 'INT32',
            np.dtype('int64'): 'INT64',
        }

        server_url = 'koina.proteomicsdb.org:443'
        model_name = 'Prosit_2019_irt'
        batch_size = 1000
        inputs = {
            'peptide_sequences': np.array(["AAAAAKAKM[UNIMOD:35]"], dtype=np.dtype("O")).reshape([1,1]),
        }
        outputs = [ 'irt', ]

        triton_client = grpcclient.InferenceServerClient(url=server_url, ssl=True)

        koina_outputs = []
        for name in outputs:
            koina_outputs.append(grpcclient.InferRequestedOutput(name))

        predictions = {name: [] for name in outputs}
        len_inputs = list(inputs.values())[0].shape[0]
        for i in range(0, len_inputs, batch_size):
            if len_inputs < i+batch_size:
                current_batchsize = len_inputs
            else:
                current_batchsize = batch_size

            koina_inputs = []
            for iname, iarr in inputs.items():
                koina_inputs.append(
                    grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])
                )
                koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])

            prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)

            for name in outputs:
                predictions[name].append(prediction.as_numpy(name))

        for key, value in predictions.items():
            predictions[key] = np.vstack(value)
            print(key)
            print(predictions[key])
        ```

        </details>
      operationId: Prosit_2019_irt
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prosit_2019_irt_input'
        required: true
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input

  /Prosit_2019_intensity/infer:
     post:
      tags:
        - Intensity
      summary: Prosit_2019_intensity
      description: |
        **Summary**

        Find out more about this model <a href="https://github.com/kusterlab/prosit">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>Prosit offers high quality MS2 predicted spectra for any organism and protease as well as iRT prediction. When using Prosit is helpful for your research, please cite "Gessulat, Schmidt et al. 2019" DOI 10.1038/s41592-019-0426-7 <br>

        **Citaton**



        **Examples**

        <details>
        <summary>Python using GRPC</summary>

        ```python
        import numpy as np
        import time
        import tritonclient.grpc as grpcclient

        nptype_convert = {
            np.dtype('float32'): 'FP32',
            np.dtype('O'): 'BYTES',
            np.dtype('int16'): 'INT16',
            np.dtype('int32'): 'INT32',
            np.dtype('int64'): 'INT64',
        }

        server_url = 'koina.proteomicsdb.org:443'
        model_name = 'Prosit_2019_intensity'
        batch_size = 1000
        inputs = {
            'peptide_sequences': np.array(["AAAAAKAK", "AAAAAKAK"], dtype=np.dtype("O")).reshape([2,1]),
            'precursor_charges': np.array([1,2], dtype=np.dtype("int32")).reshape([2,1]),
            'collision_energies': np.array([25, 25], dtype=np.dtype("float32")).reshape([2,1]),
        }
        outputs = [ 'intensities',  'mz',  'annotation', ]

        triton_client = grpcclient.InferenceServerClient(url=server_url, ssl=True)

        koina_outputs = []
        for name in outputs:
            koina_outputs.append(grpcclient.InferRequestedOutput(name))

        predictions = {name: [] for name in outputs}
        len_inputs = list(inputs.values())[0].shape[0]
        for i in range(0, len_inputs, batch_size):
            if len_inputs < i+batch_size:
                current_batchsize = len_inputs
            else:
                current_batchsize = batch_size

            koina_inputs = []
            for iname, iarr in inputs.items():
                koina_inputs.append(
                    grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])
                )
                koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])

            prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)

            for name in outputs:
                predictions[name].append(prediction.as_numpy(name))

        for key, value in predictions.items():
            predictions[key] = np.vstack(value)
            print(key)
            print(predictions[key])
        ```

        </details>
      operationId: Prosit_2019_intensity
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prosit_2019_intensity_input'
        required: true
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input

  /Prosit_2020_intensity_CID/infer:
     post:
      tags:
        - Intensity
      summary: Prosit_2020_intensity_CID
      description: |
        **Summary**

        Find out more about this model <a href="https://github.com/kusterlab/prosit">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>Wilhelm, M., Zolg, D.P., Graber, M. et al. Deep learning boosts sensitivity of mass spectrometry-based immunopeptidomics. Nat Commun 12, 3346 (2021). https://doi.org/10.1038/s41467-021-23713-9<br>

        **Citaton**



        **Examples**

        <details>
        <summary>Python using GRPC</summary>

        ```python
        import numpy as np
        import time
        import tritonclient.grpc as grpcclient

        nptype_convert = {
            np.dtype('float32'): 'FP32',
            np.dtype('O'): 'BYTES',
            np.dtype('int16'): 'INT16',
            np.dtype('int32'): 'INT32',
            np.dtype('int64'): 'INT64',
        }

        server_url = 'koina.proteomicsdb.org:443'
        model_name = 'Prosit_2020_intensity_CID'
        batch_size = 1000
        inputs = {
            'peptide_sequences': np.array(["AAAAAKAK", "AAAAAKAK"], dtype=np.dtype("O")).reshape([2,1]),
            'precursor_charges': np.array([1,2], dtype=np.dtype("int32")).reshape([2,1]),
        }
        outputs = [ 'intensities',  'mz',  'annotation', ]

        triton_client = grpcclient.InferenceServerClient(url=server_url, ssl=True)

        koina_outputs = []
        for name in outputs:
            koina_outputs.append(grpcclient.InferRequestedOutput(name))

        predictions = {name: [] for name in outputs}
        len_inputs = list(inputs.values())[0].shape[0]
        for i in range(0, len_inputs, batch_size):
            if len_inputs < i+batch_size:
                current_batchsize = len_inputs
            else:
                current_batchsize = batch_size

            koina_inputs = []
            for iname, iarr in inputs.items():
                koina_inputs.append(
                    grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])
                )
                koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])

            prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)

            for name in outputs:
                predictions[name].append(prediction.as_numpy(name))

        for key, value in predictions.items():
            predictions[key] = np.vstack(value)
            print(key)
            print(predictions[key])
        ```

        </details>
      operationId: Prosit_2020_intensity_CID
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prosit_2020_intensity_CID_input'
        required: true
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input

  /Prosit_2020_intensity_TMT/infer:
     post:
      tags:
        - Intensity
      summary: Prosit_2020_intensity_TMT
      description: |
        **Summary**

        Find out more about this model <a href="https://github.com/kusterlab/prosit">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>Wassim Gabriel, Matthew The, Daniel P. Zolg, Florian P. Bayer, Omar Shouman, Ludwig Lautenbacher, Karsten Schnatbaum, Johannes Zerweck, Tobias Knaute, Bernard Delanghe, Andreas Huhmer, Holger Wenschuh, Ulf Reimer, Guillaume Médard, Bernhard Kuster, and Mathias Wilhelm<br>Analytical Chemistry 2022 94 (20), 7181-7190<br>DOI: 10.1021/acs.analchem.1c05435 <br>

        **Citaton**



        **Examples**

        <details>
        <summary>Python using GRPC</summary>

        ```python
        import numpy as np
        import time
        import tritonclient.grpc as grpcclient

        nptype_convert = {
            np.dtype('float32'): 'FP32',
            np.dtype('O'): 'BYTES',
            np.dtype('int16'): 'INT16',
            np.dtype('int32'): 'INT32',
            np.dtype('int64'): 'INT64',
        }

        server_url = 'koina.proteomicsdb.org:443'
        model_name = 'Prosit_2020_intensity_TMT'
        batch_size = 1000
        inputs = {
            'peptide_sequences': np.array(["AAAAAKAK", "AAAAAKAK"], dtype=np.dtype("O")).reshape([2,1]),
            'precursor_charges': np.array([1,2], dtype=np.dtype("int32")).reshape([2,1]),
            'collision_energies': np.array([25, 25], dtype=np.dtype("float32")).reshape([2,1]),
            'fragmentation_types': np.array([0, 0], dtype=np.dtype("float32")).reshape([2,1]),
        }
        outputs = [ 'intensities',  'mz',  'annotation', ]

        triton_client = grpcclient.InferenceServerClient(url=server_url, ssl=True)

        koina_outputs = []
        for name in outputs:
            koina_outputs.append(grpcclient.InferRequestedOutput(name))

        predictions = {name: [] for name in outputs}
        len_inputs = list(inputs.values())[0].shape[0]
        for i in range(0, len_inputs, batch_size):
            if len_inputs < i+batch_size:
                current_batchsize = len_inputs
            else:
                current_batchsize = batch_size

            koina_inputs = []
            for iname, iarr in inputs.items():
                koina_inputs.append(
                    grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])
                )
                koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])

            prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)

            for name in outputs:
                predictions[name].append(prediction.as_numpy(name))

        for key, value in predictions.items():
            predictions[key] = np.vstack(value)
            print(key)
            print(predictions[key])
        ```

        </details>
      operationId: Prosit_2020_intensity_TMT
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prosit_2020_intensity_TMT_input'
        required: true
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input

  /Prosit_2020_intensity_HCD/infer:
     post:
      tags:
        - Intensity
      summary: Prosit_2020_intensity_HCD
      description: |
        **Summary**

        Find out more about this model <a href="https://github.com/kusterlab/prosit">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>Wilhelm, M., Zolg, D.P., Graber, M. et al. Deep learning boosts sensitivity of mass spectrometry-based immunopeptidomics. Nat Commun 12, 3346 (2021). https://doi.org/10.1038/s41467-021-23713-9<br>

        **Citaton**



        **Examples**

        <details>
        <summary>Python using GRPC</summary>

        ```python
        import numpy as np
        import time
        import tritonclient.grpc as grpcclient

        nptype_convert = {
            np.dtype('float32'): 'FP32',
            np.dtype('O'): 'BYTES',
            np.dtype('int16'): 'INT16',
            np.dtype('int32'): 'INT32',
            np.dtype('int64'): 'INT64',
        }

        server_url = 'koina.proteomicsdb.org:443'
        model_name = 'Prosit_2020_intensity_HCD'
        batch_size = 1000
        inputs = {
            'peptide_sequences': np.array(["AAAAAKAK", "AAAAAKAK"], dtype=np.dtype("O")).reshape([2,1]),
            'precursor_charges': np.array([1,2], dtype=np.dtype("int32")).reshape([2,1]),
            'collision_energies': np.array([25, 25], dtype=np.dtype("float32")).reshape([2,1]),
        }
        outputs = [ 'intensities',  'mz',  'annotation', ]

        triton_client = grpcclient.InferenceServerClient(url=server_url, ssl=True)

        koina_outputs = []
        for name in outputs:
            koina_outputs.append(grpcclient.InferRequestedOutput(name))

        predictions = {name: [] for name in outputs}
        len_inputs = list(inputs.values())[0].shape[0]
        for i in range(0, len_inputs, batch_size):
            if len_inputs < i+batch_size:
                current_batchsize = len_inputs
            else:
                current_batchsize = batch_size

            koina_inputs = []
            for iname, iarr in inputs.items():
                koina_inputs.append(
                    grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])
                )
                koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])

            prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)

            for name in outputs:
                predictions[name].append(prediction.as_numpy(name))

        for key, value in predictions.items():
            predictions[key] = np.vstack(value)
            print(key)
            print(predictions[key])
        ```

        </details>
      operationId: Prosit_2020_intensity_HCD
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prosit_2020_intensity_HCD_input'
        required: true
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input

  /Prosit_2023_intensity_TOF/infer:
     post:
      tags:
        - Intensity
      summary: Prosit_2023_intensity_TOF
      description: |
        **Summary**

        The HCD Prosit 2020 model was fine-tuned using 277,781 MS/MS spectra of both tryptic and non-tryptic synthesized peptides measured on a timsTOF Pro. The model architecture remained unchanged. The data was split into three distinct sets with each peptide and subsequence of a peptide only included in one of the three: training (80%, 153,809 tryptic PSMs and 77,577 non-tryptic PSMs), validation (10%, 16,483 tryptic PSMs and 7,778 non-tryptic PSMs), and test (10%, 14,262 tryptic PSMs and 7,872 non-tryptic PSMs).<br><br>For this project, over 300,000 non-tryptic peptides from the ProteomeTools project were measured. Our measurements encompassed a range of collision energies from 20.81 EV to 69.77 eV. The data was analyzed using MaxQuant version 2.1.2.0 with carbamidomethylated cysteine specified as a fixed modification and methionine oxidation as a variable modification.<br><br>The HCD Prosit 2020 model was originally trained on approximately 30 million MS/MS spectra, consisting of 9 million MS/MS spectra of non-tryptic peptides and 21 million previously published tryptic MS/MS spectra. The comparison between the HCD Prosit 2020 model and the newly developed TOF Prosit 2023 model reveals a substantial improvement in normalized spectral contrast angle (SA) between predicted and experimental timsTOF MS/MS spectra for both non-tryptic and tryptic peptides. The TOF Prosit 2023 model achieved a SA ≥ 0.9 for 26.3% of non-tryptic spectra (compared to 2.4% with HCD Prosit 2020) and 42.1% of tryptic spectra (compared to 0.2% with HCD Prosit 2020).<br><br>The TOF Prosit 2023 model demonstrates consistent performance across different precursor charges, peptide lengths, and collision energies, with minimal bias towards C- and N-terminal amino acids. Both the tryptic and non-tryptic timsTOF data are available via PRIDE, with the identifiers PXD019086 and PXD043844, respectively.<br>

        **Citaton**

        Fragment ion intensity prediction improves the identification rate of non-tryptic peptides in TimsTOF<br>Charlotte Adams, Wassim Gabriel, Kris Laukens, Mathias Wilhelm, Wout Bittremieux, Kurt Boonen<br>bioRxiv 2023.07.17.549401; doi: https://doi.org/10.1101/2023.07.17.549401 <br>

        **Examples**

        <details>
        <summary>Python using GRPC</summary>

        ```python
        import numpy as np
        import time
        import tritonclient.grpc as grpcclient

        nptype_convert = {
            np.dtype('float32'): 'FP32',
            np.dtype('O'): 'BYTES',
            np.dtype('int16'): 'INT16',
            np.dtype('int32'): 'INT32',
            np.dtype('int64'): 'INT64',
        }

        server_url = 'koina.proteomicsdb.org:443'
        model_name = 'Prosit_2023_intensity_TOF'
        batch_size = 1000
        inputs = {
            'peptide_sequences': np.array(["AAAAAKAK", "AAAAAKAK"], dtype=np.dtype("O")).reshape([2,1]),
            'precursor_charges': np.array([1,2], dtype=np.dtype("int32")).reshape([2,1]),
            'collision_energies': np.array([25, 25], dtype=np.dtype("float32")).reshape([2,1]),
        }
        outputs = [ 'intensities',  'mz',  'annotation', ]

        triton_client = grpcclient.InferenceServerClient(url=server_url, ssl=True)

        koina_outputs = []
        for name in outputs:
            koina_outputs.append(grpcclient.InferRequestedOutput(name))

        predictions = {name: [] for name in outputs}
        len_inputs = list(inputs.values())[0].shape[0]
        for i in range(0, len_inputs, batch_size):
            if len_inputs < i+batch_size:
                current_batchsize = len_inputs
            else:
                current_batchsize = batch_size

            koina_inputs = []
            for iname, iarr in inputs.items():
                koina_inputs.append(
                    grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])
                )
                koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])

            prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)

            for name in outputs:
                predictions[name].append(prediction.as_numpy(name))

        for key, value in predictions.items():
            predictions[key] = np.vstack(value)
            print(key)
            print(predictions[key])
        ```

        </details>
      operationId: Prosit_2023_intensity_TOF
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prosit_2023_intensity_TOF_input'
        required: true
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input

  /Prosit_2020_irt_TMT/infer:
     post:
      tags:
        - Retention Time
      summary: Prosit_2020_irt_TMT
      description: |
        **Summary**

        Find out more about this model <a href="https://github.com/kusterlab/prosit">here</a>.<br><br>If you use predictions generated by this model please cite the following paper.<br><br>Wassim Gabriel, Matthew The, Daniel P. Zolg, Florian P. Bayer, Omar Shouman, Ludwig Lautenbacher, Karsten Schnatbaum, Johannes Zerweck, Tobias Knaute, Bernard Delanghe, Andreas Huhmer, Holger Wenschuh, Ulf Reimer, Guillaume Médard, Bernhard Kuster, and Mathias Wilhelm<br>Analytical Chemistry 2022 94 (20), 7181-7190<br>DOI: 10.1021/acs.analchem.1c05435 <br>

        **Citaton**



        **Examples**

        <details>
        <summary>Python using GRPC</summary>

        ```python
        import numpy as np
        import time
        import tritonclient.grpc as grpcclient

        nptype_convert = {
            np.dtype('float32'): 'FP32',
            np.dtype('O'): 'BYTES',
            np.dtype('int16'): 'INT16',
            np.dtype('int32'): 'INT32',
            np.dtype('int64'): 'INT64',
        }

        server_url = 'koina.proteomicsdb.org:443'
        model_name = 'Prosit_2020_irt_TMT'
        batch_size = 1000
        inputs = {
            'peptide_sequences': np.array(["AAAAAKAKM[UNIMOD:35]"], dtype=np.dtype("O")).reshape([1,1]),
        }
        outputs = [ 'irt', ]

        triton_client = grpcclient.InferenceServerClient(url=server_url, ssl=True)

        koina_outputs = []
        for name in outputs:
            koina_outputs.append(grpcclient.InferRequestedOutput(name))

        predictions = {name: [] for name in outputs}
        len_inputs = list(inputs.values())[0].shape[0]
        for i in range(0, len_inputs, batch_size):
            if len_inputs < i+batch_size:
                current_batchsize = len_inputs
            else:
                current_batchsize = batch_size

            koina_inputs = []
            for iname, iarr in inputs.items():
                koina_inputs.append(
                    grpcclient.InferInput(iname, [current_batchsize, 1], nptype_convert[iarr.dtype])
                )
                koina_inputs[-1].set_data_from_numpy(iarr[i:i+current_batchsize])

            prediction = triton_client.infer(model_name, inputs=koina_inputs, outputs=koina_outputs)

            for name in outputs:
                predictions[name].append(prediction.as_numpy(name))

        for key, value in predictions.items():
            predictions[key] = np.vstack(value)
            print(key)
            print(predictions[key])
        ```

        </details>
      operationId: Prosit_2020_irt_TMT
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prosit_2020_irt_TMT_input'
        required: true
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input

components:
  schemas:
    parameters:
      type: object
      properties:
        sequence_id:
          type: integer
          example: 0
        sequence_start:
          type: boolean
          example: false
        sequence_end:
          type: boolean
          example: false

    Deeplc_hela_hf_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          example:

            - name: peptide_sequences
              shape: [4,1]
              datatype: BYTES
              data: [['LGGNEQVTR'], ['GAGSSEPVTGLDAK'], ['VEATFGVDESNAK'], ['LFLQFGAQGSPFLK']]

          type: array
          items:
            oneOf:

              - $ref: "#/components/schemas/Deeplc_hela_hf_input_peptide_sequences"

            minItems: 1
            maxItems: 1
            uniqueItems: true


    Deeplc_hela_hf_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: [['LGGNEQVTR'], ['GAGSSEPVTGLDAK'], ['VEATFGVDESNAK'], ['LFLQFGAQGSPFLK']]
          items:
            type:


    ms2pip_2021_HCD_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          example:

            - name: peptide_sequences
              shape: [2,1]
              datatype: BYTES
              data: ["ACDEK", "AAAAAAAAAAAAA"]

            - name: precursor_charges
              shape: [2,1]
              datatype: INT32
              data: [2, 3]

          type: array
          items:
            oneOf:

              - $ref: "#/components/schemas/ms2pip_2021_HCD_input_peptide_sequences"

              - $ref: "#/components/schemas/ms2pip_2021_HCD_input_precursor_charges"

            minItems: 2
            maxItems: 2
            uniqueItems: true


    ms2pip_2021_HCD_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: ["ACDEK", "AAAAAAAAAAAAA"]
          items:
            type:

    ms2pip_2021_HCD_input_precursor_charges:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: [2, 3]
          items:
            type:


    AlphaPept_ccs_generic_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          example:

            - name: peptide_sequences
              shape: [1,1]
              datatype: BYTES
              data: ["AAAAAKAKM[UNIMOD:35]"]

            - name: precursor_charges
              shape: [1,1]
              datatype: INT32
              data: [2]

          type: array
          items:
            oneOf:

              - $ref: "#/components/schemas/AlphaPept_ccs_generic_input_peptide_sequences"

              - $ref: "#/components/schemas/AlphaPept_ccs_generic_input_precursor_charges"

            minItems: 2
            maxItems: 2
            uniqueItems: true


    AlphaPept_ccs_generic_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: ["AAAAAKAKM[UNIMOD:35]"]
          items:
            type:

    AlphaPept_ccs_generic_input_precursor_charges:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: [2]
          items:
            type:


    AlphaPept_ms2_generic_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          example:

            - name: peptide_sequences
              shape: [1,1]
              datatype: BYTES
              data: ["AAAAAKAKM[UNIMOD:35]"]

            - name: precursor_charges
              shape: [1,1]
              datatype: INT32
              data: [2]

            - name: collision_energies
              shape: [1,1]
              datatype: FP32
              data: [25]

            - name: instrument_types
              shape: [1,1]
              datatype: INT64
              data: [1]

          type: array
          items:
            oneOf:

              - $ref: "#/components/schemas/AlphaPept_ms2_generic_input_peptide_sequences"

              - $ref: "#/components/schemas/AlphaPept_ms2_generic_input_precursor_charges"

              - $ref: "#/components/schemas/AlphaPept_ms2_generic_input_collision_energies"

              - $ref: "#/components/schemas/AlphaPept_ms2_generic_input_instrument_types"

            minItems: 4
            maxItems: 4
            uniqueItems: true


    AlphaPept_ms2_generic_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: ["AAAAAKAKM[UNIMOD:35]"]
          items:
            type:

    AlphaPept_ms2_generic_input_precursor_charges:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: [2]
          items:
            type:

    AlphaPept_ms2_generic_input_collision_energies:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: [25]
          items:
            type:

    AlphaPept_ms2_generic_input_instrument_types:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: [1]
          items:
            type:


    AlphaPept_rt_generic_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          example:

            - name: peptide_sequences
              shape: [1,1]
              datatype: BYTES
              data: ["AAAAAKAKM[UNIMOD:35]"]

          type: array
          items:
            oneOf:

              - $ref: "#/components/schemas/AlphaPept_rt_generic_input_peptide_sequences"

            minItems: 1
            maxItems: 1
            uniqueItems: true


    AlphaPept_rt_generic_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: ["AAAAAKAKM[UNIMOD:35]"]
          items:
            type:


    Prosit_2019_irt_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          example:

            - name: peptide_sequences
              shape: [1,1]
              datatype: BYTES
              data: ["AAAAAKAKM[UNIMOD:35]"]

          type: array
          items:
            oneOf:

              - $ref: "#/components/schemas/Prosit_2019_irt_input_peptide_sequences"

            minItems: 1
            maxItems: 1
            uniqueItems: true


    Prosit_2019_irt_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: ["AAAAAKAKM[UNIMOD:35]"]
          items:
            type:


    Prosit_2019_intensity_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          example:

            - name: peptide_sequences
              shape: [2,1]
              datatype: BYTES
              data: ["AAAAAKAK", "AAAAAKAK"]

            - name: precursor_charges
              shape: [2,1]
              datatype: INT32
              data: [1,2]

            - name: collision_energies
              shape: [2,1]
              datatype: FP32
              data: [25, 25]

          type: array
          items:
            oneOf:

              - $ref: "#/components/schemas/Prosit_2019_intensity_input_peptide_sequences"

              - $ref: "#/components/schemas/Prosit_2019_intensity_input_precursor_charges"

              - $ref: "#/components/schemas/Prosit_2019_intensity_input_collision_energies"

            minItems: 3
            maxItems: 3
            uniqueItems: true


    Prosit_2019_intensity_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: ["AAAAAKAK", "AAAAAKAK"]
          items:
            type:

    Prosit_2019_intensity_input_precursor_charges:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: [1,2]
          items:
            type:

    Prosit_2019_intensity_input_collision_energies:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: [25, 25]
          items:
            type:


    Prosit_2020_intensity_CID_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          example:

            - name: peptide_sequences
              shape: [2,1]
              datatype: BYTES
              data: ["AAAAAKAK", "AAAAAKAK"]

            - name: precursor_charges
              shape: [2,1]
              datatype: INT32
              data: [1,2]

          type: array
          items:
            oneOf:

              - $ref: "#/components/schemas/Prosit_2020_intensity_CID_input_peptide_sequences"

              - $ref: "#/components/schemas/Prosit_2020_intensity_CID_input_precursor_charges"

            minItems: 2
            maxItems: 2
            uniqueItems: true


    Prosit_2020_intensity_CID_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: ["AAAAAKAK", "AAAAAKAK"]
          items:
            type:

    Prosit_2020_intensity_CID_input_precursor_charges:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: [1,2]
          items:
            type:


    Prosit_2020_intensity_TMT_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          example:

            - name: peptide_sequences
              shape: [2,1]
              datatype: BYTES
              data: ["AAAAAKAK", "AAAAAKAK"]

            - name: precursor_charges
              shape: [2,1]
              datatype: INT32
              data: [1,2]

            - name: collision_energies
              shape: [2,1]
              datatype: FP32
              data: [25, 25]

            - name: fragmentation_types
              shape: [2,1]
              datatype: FP32
              data: [0, 0]

          type: array
          items:
            oneOf:

              - $ref: "#/components/schemas/Prosit_2020_intensity_TMT_input_peptide_sequences"

              - $ref: "#/components/schemas/Prosit_2020_intensity_TMT_input_precursor_charges"

              - $ref: "#/components/schemas/Prosit_2020_intensity_TMT_input_collision_energies"

              - $ref: "#/components/schemas/Prosit_2020_intensity_TMT_input_fragmentation_types"

            minItems: 4
            maxItems: 4
            uniqueItems: true


    Prosit_2020_intensity_TMT_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: ["AAAAAKAK", "AAAAAKAK"]
          items:
            type:

    Prosit_2020_intensity_TMT_input_precursor_charges:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: [1,2]
          items:
            type:

    Prosit_2020_intensity_TMT_input_collision_energies:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: [25, 25]
          items:
            type:

    Prosit_2020_intensity_TMT_input_fragmentation_types:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: [0, 0]
          items:
            type:


    Prosit_2020_intensity_HCD_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          example:

            - name: peptide_sequences
              shape: [2,1]
              datatype: BYTES
              data: ["AAAAAKAK", "AAAAAKAK"]

            - name: precursor_charges
              shape: [2,1]
              datatype: INT32
              data: [1,2]

            - name: collision_energies
              shape: [2,1]
              datatype: FP32
              data: [25, 25]

          type: array
          items:
            oneOf:

              - $ref: "#/components/schemas/Prosit_2020_intensity_HCD_input_peptide_sequences"

              - $ref: "#/components/schemas/Prosit_2020_intensity_HCD_input_precursor_charges"

              - $ref: "#/components/schemas/Prosit_2020_intensity_HCD_input_collision_energies"

            minItems: 3
            maxItems: 3
            uniqueItems: true


    Prosit_2020_intensity_HCD_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: ["AAAAAKAK", "AAAAAKAK"]
          items:
            type:

    Prosit_2020_intensity_HCD_input_precursor_charges:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: [1,2]
          items:
            type:

    Prosit_2020_intensity_HCD_input_collision_energies:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: [25, 25]
          items:
            type:


    Prosit_2023_intensity_TOF_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          example:

            - name: peptide_sequences
              shape: [2,1]
              datatype: BYTES
              data: ["AAAAAKAK", "AAAAAKAK"]

            - name: precursor_charges
              shape: [2,1]
              datatype: INT32
              data: [1,2]

            - name: collision_energies
              shape: [2,1]
              datatype: FP32
              data: [25, 25]

          type: array
          items:
            oneOf:

              - $ref: "#/components/schemas/Prosit_2023_intensity_TOF_input_peptide_sequences"

              - $ref: "#/components/schemas/Prosit_2023_intensity_TOF_input_precursor_charges"

              - $ref: "#/components/schemas/Prosit_2023_intensity_TOF_input_collision_energies"

            minItems: 3
            maxItems: 3
            uniqueItems: true


    Prosit_2023_intensity_TOF_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: ["AAAAAKAK", "AAAAAKAK"]
          items:
            type:

    Prosit_2023_intensity_TOF_input_precursor_charges:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: [1,2]
          items:
            type:

    Prosit_2023_intensity_TOF_input_collision_energies:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: [25, 25]
          items:
            type:


    Prosit_2020_irt_TMT_input:
      type: object
      properties:
        id:
          type: string
          example: "0"
        inputs:
          example:

            - name: peptide_sequences
              shape: [1,1]
              datatype: BYTES
              data: ["AAAAAKAKM[UNIMOD:35]"]

          type: array
          items:
            oneOf:

              - $ref: "#/components/schemas/Prosit_2020_irt_TMT_input_peptide_sequences"

            minItems: 1
            maxItems: 1
            uniqueItems: true


    Prosit_2020_irt_TMT_input_peptide_sequences:
      type: object
      properties:
        name:
          type: string
        shape:
          type: array
          items:
            type: integer
        datatype:
          type: string
        data:
          type: array
          example: ["AAAAAKAKM[UNIMOD:35]"]
          items:
            type:
